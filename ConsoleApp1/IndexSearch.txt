Console.WriteLine("Usearch");

try
{
    Stopwatch stopwatch = new Stopwatch();
    Stopwatch stopwatchTotal = new Stopwatch();

    stopwatch.Start();
    stopwatchTotal.Start();
    // Load, resize, and preprocess the images to index
    string[] imagePathsToIndex = new string[]
    {
        "D:\\Test\\USearch\\ConsoleApp1\\image1.jpg",
        "D:\\Test\\USearch\\ConsoleApp1\\image1.jpg",
        "D:\\Test\\USearch\\ConsoleApp1\\image1.jpg",
        "D:\\Test\\USearch\\ConsoleApp1\\image1.jpg",


    };

    //float[][] vectorsToIndex = LoadAndProcessImages(imagePathsToIndex, out int vectorLengthToIndex);

    // Load, resize, and preprocess the query image
    string queryImagePath = "D:\\Test\\USearch\\ConsoleApp1\\queryImage.jpg";
    if (!File.Exists(queryImagePath))
    {
        Console.WriteLine("Error: Query image file does not exist.");
        return;
    }


    Console.WriteLine($"Extract vectors 1000 images: {stopwatch.ElapsedMilliseconds} ms");
    stopwatch.Stop();

    using Bitmap queryBitmap = new Bitmap(queryImagePath);
    using Bitmap resizedQueryBitmap = ResizeImage(queryBitmap, 100, 100); // Resize to the fixed size
    float[] queryVector = ExtractImageFeatures(resizedQueryBitmap);
    //
    //Console.WriteLine($"Time to process query image: {stopwatch.ElapsedMilliseconds} ms");

    // Create and use the USearchIndex
    stopwatch.Restart();
    //using var index = new USearchIndex(
    //    metricKind: MetricKind.Cos,
    //    quantization: ScalarKind.Float32,
    //    dimensions: ulong.Parse(vectorLengthToIndex.ToString()), // Pass the length as an int
    //    connectivity: 16,
    //    expansionAdd: 128,
    //    expansionSearch: 64
    //);

    using var index = new USearchIndex("index.usearch");


    // Add all images' vectors to the index
    //for (ulong i = 0; i < ulong.Parse(vectorsToIndex.Length.ToString()); i++)
    //{
    //    index.Add(i, vectorsToIndex[i]);
    //}



    //index.Save("index.usearch");

    Console.WriteLine($"Indexed: {stopwatch.ElapsedMilliseconds} ms");
    stopwatch.Stop(); 
    stopwatch.Restart();
    // Search for the closest matches using the query image's vector
    //int matches = index.Search(queryVector, vectorsToIndex.Length, out ulong[] keys, out float[] distances);
    int matches = index.Search(queryVector, int.Parse(index.Dimensions().ToString()), out ulong[] keys, out float[] distances);

    // Print the results
    for (int i = 0; i < matches; i++)
    {
        //Console.WriteLine($"Match found: Image ID = {keys[i]}, Distance = {distances[i]}");
    }

    //Trace.Assert(index.Size() == ulong.Parse(vectorsToIndex.Length.ToString()));
   // Trace.Assert(index.Size() == index.Dimensions());


    stopwatch.Stop();
    Console.WriteLine($"Time to search for the closest matches: {stopwatch.ElapsedMilliseconds} ms");
    Console.WriteLine($"Total: {stopwatchTotal.ElapsedMilliseconds} ms");

}
catch (ArgumentException ex)
{
    Console.WriteLine("An error occurred while loading the image: " + ex.Message);
}
catch (Exception ex)
{
    Console.WriteLine("An unexpected error occurred: " + ex.Message);
}



static float[][] LoadAndProcessImages(string[] imagePaths, out int vectorLength)
{
    var vectors = new System.Collections.Generic.List<float[]>();

    foreach (var path in imagePaths)
    {
        if (!File.Exists(path))
        {
            Console.WriteLine($"Error: Image file {path} does not exist.");
            continue;
        }

        using Bitmap bitmap = new Bitmap(path);
        using Bitmap resizedBitmap = ResizeImage(bitmap, 100, 100); // Resize to a fixed size
        float[] vector = ExtractImageFeatures(resizedBitmap);
        vectors.Add(vector);
    }

    if (vectors.Count == 0)
    {
        vectorLength = 0;
        return Array.Empty<float[]>();
    }

    vectorLength = vectors[0].Length; // Assuming all vectors have the same length
    return vectors.ToArray();
}

static Bitmap ResizeImage(Bitmap originalImage, int width, int height)
{
    Bitmap resizedImage = new Bitmap(width, height);
    using (Graphics graphics = Graphics.FromImage(resizedImage))
    {
        graphics.DrawImage(originalImage, 0, 0, width, height);
    }
    return resizedImage;
}

static float[] ExtractImageFeatures(Bitmap bitmap)
{
    int width = bitmap.Width;
    int height = bitmap.Height;
    int dimension = width * height * 3; // Assuming RGB image
    float[] vector = new float[dimension];

    int index = 0;
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            Color pixel = bitmap.GetPixel(x, y);
            vector[index++] = pixel.R / 255f;
            vector[index++] = pixel.G / 255f;
            vector[index++] = pixel.B / 255f;
        }
    }

    return vector;
}
